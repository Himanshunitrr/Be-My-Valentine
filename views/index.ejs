<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Will you be my Valentine?</title>
  <style>
    /* Basic reset and styling */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    html, body { width: 100%; height: 100%; }
    body {
      position: relative;
      background: #ffe6e6;
      font-family: Arial, sans-serif;
      overflow: hidden;
    }
    .center-container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      text-align: center;
    }
    h1 { font-size: 2em; margin-bottom: 20px; }
    #yes-btn, #no-btn {
      padding: 10px 20px;
      font-size: 1em;
      cursor: pointer;
      position: absolute;
    }
    #no-btn { transition: top 0.3s ease, left 0.3s ease; }
  </style>
</head>
<body>
  <div class="center-container">
    <h1>Will you be my Valentine?</h1>
  </div>
  
  <button id="yes-btn">Yes</button>
  <button id="no-btn">No</button>
  
  <script>
    // The dynamic id passed from the server.
    const valentineId = "<%= id %>";
    const yesBtn = document.getElementById('yes-btn');
    const noBtn = document.getElementById('no-btn');
    const centerContainer = document.querySelector('.center-container');
    const verticalGap = 20; // gap between headline and buttons

    /**
     * Position the Yes and No buttons in the middle of the screen
     * with a generous gap between them.
     */
    function positionButtons() {
      const centerRect = centerContainer.getBoundingClientRect();
      const btnTop = centerRect.bottom + verticalGap;
      
      // Calculate a gap between the buttons based on the headline's width,
      // clamped to be between 100px and 300px for a balanced look.
      let gapBetween = centerContainer.offsetWidth;
      gapBetween = Math.max(100, Math.min(gapBetween, 300));

      const yesWidth = yesBtn.offsetWidth;
      const noWidth = noBtn.offsetWidth;
      const totalButtonsWidth = yesWidth + gapBetween + noWidth;
      const leftOffset = (window.innerWidth - totalButtonsWidth) / 2;

      yesBtn.style.top = btnTop + 'px';
      yesBtn.style.left = leftOffset + 'px';

      noBtn.style.top = btnTop + 'px';
      noBtn.style.left = (leftOffset + yesWidth + gapBetween) + 'px';
    }

    window.addEventListener('load', positionButtons);
    window.addEventListener('resize', positionButtons);

    // When the Yes button is clicked, redirect to the dynamic Yes page.
    yesBtn.addEventListener('click', function(){
      window.location.href = `/valentine/${valentineId}/yes`;
    });

    /**
     * Listen for mouse movements.
     * If the mouse comes close to the No button, move it smoothly away.
     */
    document.addEventListener('mousemove', function(e) {
      const rect = noBtn.getBoundingClientRect();
      const btnCenterX = rect.left + rect.width / 2;
      const btnCenterY = rect.top + rect.height / 2;
      const distance = Math.hypot(e.clientX - btnCenterX, e.clientY - btnCenterY);
      const threshold = 100; // trigger when closer than 100px

      if (distance < threshold) {
        let dx = btnCenterX - e.clientX;
        let dy = btnCenterY - e.clientY;
        let length = Math.hypot(dx, dy);
        
        // If the pointer is extremely close, choose a random direction.
        if (length < 1) {
          const angle = Math.random() * 2 * Math.PI;
          dx = Math.cos(angle);
          dy = Math.sin(angle);
          length = 1;
        }
        
        // Constants for corner adjustments.
        const nearBoundaryThreshold = 300; // if the button is within 300px of a wall
        const pushForce = 300; // extra force to push away from the wall
        
        // Check for each corner. Use rect.right and rect.bottom as (rect.left + rect.width) and (rect.top + rect.height)
        if (rect.left < nearBoundaryThreshold && rect.top < nearBoundaryThreshold) {
          // Top-left corner: push rightwards and downwards.
          dx = Math.abs(dx) + pushForce;
          dy = Math.abs(dy) + pushForce;
        } else if (rect.right > window.innerWidth - nearBoundaryThreshold && rect.top < nearBoundaryThreshold) {
          // Top-right corner: push leftwards and downwards.
          dx = -Math.abs(dx) - pushForce;
          dy = Math.abs(dy) + pushForce;
        } else if (rect.left < nearBoundaryThreshold && rect.bottom > window.innerHeight - nearBoundaryThreshold) {
          // Bottom-left corner: push rightwards and upwards.
          dx = Math.abs(dx) + pushForce;
          dy = -Math.abs(dy) - pushForce;
        } else if (rect.right > window.innerWidth - nearBoundaryThreshold && rect.bottom > window.innerHeight - nearBoundaryThreshold) {
          // Bottom-right corner: push leftwards and upwards.
          dx = -Math.abs(dx) - pushForce;
          dy = -Math.abs(dy) - pushForce;
        }
        
        // Recalculate length after possible adjustments.
        length = Math.hypot(dx, dy);
        const step = 450; // the jump distance
        let newLeft = rect.left + (dx / length) * step;
        let newTop = rect.top + (dy / length) * step;
        const buttonWidth = rect.width;
        const buttonHeight = rect.height;
        
        // Ensure the button stays fully within the viewport.
        if (newLeft < 0) newLeft = 0;
        if (newLeft > window.innerWidth - buttonWidth) newLeft = window.innerWidth - buttonWidth;
        if (newTop < 0) newTop = 0;
        if (newTop > window.innerHeight - buttonHeight) newTop = window.innerHeight - buttonHeight;
        
        noBtn.style.left = newLeft + 'px';
        noBtn.style.top = newTop + 'px';
      }
    });

  </script>
</body>
</html>
